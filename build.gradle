buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
    }
}

plugins {
    id "java"
    id "application"
    id "me.champeau.jmh" version "0.7.1"
    id 'org.sonarqube' version '4.1.0.3113' apply true
    id 'org.springframework.boot' version '3.1.0' apply false
    id 'io.spring.dependency-management' version '1.1.0' apply false
    id 'org.springdoc.openapi-gradle-plugin' version '1.6.0' apply false
}

repositories {
    mavenCentral()
    maven { url 'https://repository.apache.org/snapshots' }
    gradlePluginPortal()
}

ext {
    set('jmhVersion', "1.36")
    set('minioVersion', "8.5.3")
    set('auth0JwtVersion', "4.4.0")
    set('jsonwebtokenVersion', "0.11.5")
    set('firebaseAdminVersion', "9.1.1")
    set('junitVersion', "5.9.3")
    set('log4jVersion', "2.20.0")
    set('springdocVersion', "1.7.0")
    set('springCloudVersion', "2022.0.3")
    set('springBootAdminVersion', "3.0.3")
    set('testcontainersVersion', "1.18.0")
}

allprojects {
    group = 'com.microservice.example'
    version = '1.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

application {
    mainClass = 'com.microservice.example.Application'
}

subprojects {
    // apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'application'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springdoc.openapi-gradle-plugin'
    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates'
        }
    }
    springBoot {
        buildInfo()
    }
    // pmd {
    //    consoleOutput = true
    // }
    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        // config project.resources.text.fromUri("https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml")
    }
    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }
    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }
    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Example of Microservice for Gradle"
        property "sonar.qualitygate.wait", true
        property "sonar.sourceEncoding", "UTF_8"
    }
}

dependencies {
    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    // libraries of json
    implementation "org.json:json:20230227"
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.32'
    implementation 'com.cedarsoftware:json-io:4.14.0'
    implementation 'com.dslplatform:dsl-json:1.10.0'
    implementation 'io.avaje:avaje-jsonb:1.6-RC1'
    runtimeOnly 'com.squareup.moshi:moshi:1.15.0'
    // libraries of jwt
    implementation "com.auth0:java-jwt:${auth0JwtVersion}"
    implementation "org.bitbucket.b_c:jose4j:0.9.3"
    implementation "com.nimbusds:nimbus-jose-jwt:9.31"
    implementation 'io.fusionauth:fusionauth-jwt:5.2.3'
    implementation "io.jsonwebtoken:jjwt-api:${jsonwebtokenVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jsonwebtokenVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jsonwebtokenVersion}"
    implementation 'io.vertx:vertx-auth-jwt:4.4.2'
    // Log4j
    implementation platform("org.apache.logging.log4j:log4j-bom:${log4jVersion}")
    implementation "org.apache.logging.log4j:log4j-api"
    runtimeOnly "org.apache.logging.log4j:log4j-core"
    // testings
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jmh {
    warmupIterations = 2
    iterations = 5
    fork = 1
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
