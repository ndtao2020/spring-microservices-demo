plugins {
    id "java"
    id "application"
    id "me.champeau.jmh" version "0.7.2"
    id "com.google.protobuf" version "0.9.4"
    id 'org.sonarqube' version '4.4.1.3373' apply true
    id 'org.springframework.boot' version '3.3.2' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0' apply false
}

repositories {
    mavenCentral()
    maven { url 'https://repository.apache.org/snapshots' }
    gradlePluginPortal()
}

ext {
    set('jmhVersion', "1.37")
    set('minioVersion', "8.5.11")
    set('activejVersion', "6.0-beta2")
    set('firebaseAdminVersion', "9.3.0")
    set('lombokVersion', "1.18.34")
    set('springdocVersion', "1.8.0")
    set('protobufVersion', "4.27.2")
    set('springCloudVersion', "2023.0.3")
    set('springBootAdminVersion', "3.3.3")
    set('testcontainersVersion', "1.20.0")
}

allprojects {
    group = 'com.microservice.example'
    version = '1.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass = 'com.microservice.example.Application'
}

sourceSets {
    jmh {
        proto {
            srcDir '.proto'
        }
    }
    main {
        proto {
            srcDir '.proto'
        }
    }
    test {
        proto {
            srcDir '.proto'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}

subprojects {
    // apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'application'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springdoc.openapi-gradle-plugin'
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates'
        }
    }
    springBoot {
        buildInfo()
    }
    // pmd {
    //    consoleOutput = true
    // }
    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        // config project.resources.text.fromUri("https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml")
    }
    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }
    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }
    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Example of Microservice for Gradle"
        property "sonar.qualitygate.wait", true
        property "sonar.sourceEncoding", "UTF_8"
    }
}

dependencies {
    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    // this is the line that solved it for me
    jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // Java Mapping Frameworks
    // https://www.baeldung.com/java-performance-mapping-frameworks
    implementation 'ma.glasnost.orika:orika-core:1.5.4'
    implementation 'org.mapstruct:mapstruct:1.6.0.RC1'
    implementation 'org.modelmapper:modelmapper:3.2.0'
    // libraries of base64
    // https://mvnrepository.com/open-source/base64-libraries
    implementation 'com.google.guava:guava:33.2.1-jre'
    implementation "commons-codec:commons-codec:1.17.1"
    implementation 'org.apache.commons:commons-lang3:3.15.0'
    // libraries of json
    // https://mvnrepository.com/open-source/json-libraries
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.52'
    implementation 'com.cedarsoftware:json-io:4.26.0'
    implementation "com.google.code.gson:gson:2.11.0"
    implementation 'jakarta.json:jakarta.json-api:2.1.3'
    implementation 'org.eclipse.parsson:parsson:1.1.6'
    implementation 'net.minidev:json-smart:2.5.1'
    implementation 'org.apache.groovy:groovy-json:4.0.17'
    implementation "org.json:json:20240303"
    runtimeOnly 'com.squareup.moshi:moshi:1.15.1'
    // libraries of jwt
    // https://mvnrepository.com/open-source/json-web-tokens-libraries
    implementation "com.auth0:java-jwt:4.4.0"
    implementation "org.bitbucket.b_c:jose4j:0.9.6"
    implementation "com.nimbusds:nimbus-jose-jwt:9.40"
    implementation 'io.fusionauth:fusionauth-jwt:5.3.3'
    implementation "io.jsonwebtoken:jjwt-api:0.12.6"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.12.6"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.12.6"
    implementation 'org.jboss.resteasy:jose-jwt:6.2.9.Final'
    // libraries of hashing password
    // https://mvnrepository.com/open-source/hashing-libraries
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'com.amdelamar:jhash:2.2.0'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.78.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'
    implementation 'de.mkammerer:argon2-jvm:2.11'
    implementation 'com.kosprov.jargon2:jargon2-api:1.1.1'
    implementation 'com.kosprov.jargon2:jargon2-native-ri-backend:1.1.1'
    implementation 'de.svenkubiak:jBCrypt:0.4.3'
    implementation 'com.password4j:password4j:1.8.2'
    implementation 'org.springframework.security:spring-security-crypto:6.3.1'
    implementation 'io.quarkus:quarkus-elytron-security-common:3.12.3'
    // https://mvnrepository.com/artifact/com.google.crypto.tink/tink
    implementation 'com.google.crypto.tink:tink:1.14.0'
    // Object Serialization
    // https://mvnrepository.com/open-source/object-serialization
    implementation "io.activej:activej-serializer:${activejVersion}"
    implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
    implementation 'org.apache.thrift:libthrift:0.20.0'
    implementation 'org.msgpack:msgpack-core:0.9.8'
    implementation 'de.undercouch:bson4jackson:2.15.1'
    implementation 'com.google.flatbuffers:flatbuffers-java:24.3.25'
    // HTTP Clients
    // https://mvnrepository.com/open-source/http-clients
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    implementation 'org.eclipse.jetty:jetty-client:12.0.11'
    implementation 'org.jodd:jodd-http:6.3.0'
    // okhttp3
    implementation platform("com.squareup.okhttp3:okhttp-bom:5.0.0-alpha.14")
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor"
    // Log4j
    implementation platform("org.apache.logging.log4j:log4j-bom:2.22.0")
    implementation "org.apache.logging.log4j:log4j-api"
    runtimeOnly "org.apache.logging.log4j:log4j-core"
    implementation 'commons-logging:commons-logging:1.3.0'
    // testings
    testImplementation platform("org.junit:junit-bom:5.10.3")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

jmh {
    warmupIterations = 1
    iterations = 1
    fork = 1
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
