buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.1'
    }
}

plugins {
    id "java"
    id "application"
    id "me.champeau.jmh" version "0.7.2"
    id 'org.sonarqube' version '4.4.1.3373' apply true
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.4' apply false
    id 'org.springdoc.openapi-gradle-plugin' version '1.8.0' apply false
}

repositories {
    mavenCentral()
    maven { url 'https://repository.apache.org/snapshots' }
    gradlePluginPortal()
}

ext {
    set('jmhVersion', "1.37")
    set('minioVersion', "8.5.7")
    set('firebaseAdminVersion', "9.2.0")
    set('lombokVersion', "1.18.30")
    set('springdocVersion', "1.7.0")
    set('springCloudVersion', "2023.0.0")
    set('springBootAdminVersion', "3.0.3")
    set('testcontainersVersion', "1.19.3")
}

allprojects {
    group = 'com.microservice.example'
    version = '1.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    mainClass = 'com.microservice.example.Application'
}

subprojects {
    // apply plugin: 'pmd'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'application'
    apply plugin: 'org.sonarqube'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springdoc.openapi-gradle-plugin'
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://artifactory-oss.prod.netflix.net/artifactory/maven-oss-candidates'
        }
    }
    springBoot {
        buildInfo()
    }
    // pmd {
    //    consoleOutput = true
    // }
    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
        // config project.resources.text.fromUri("https://raw.githubusercontent.com/spring-cloud/spring-cloud-build/master/spring-cloud-build-tools/src/main/resources/checkstyle.xml")
    }
    checkstyleMain {
        source = 'src/main/java'
    }
    checkstyleTest {
        source = 'src/test/java'
    }
    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }
    dependencyManagement {
        imports {
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "Example of Microservice for Gradle"
        property "sonar.qualitygate.wait", true
        property "sonar.sourceEncoding", "UTF_8"
    }
}

dependencies {
    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    // lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // libraries of base64
    // https://mvnrepository.com/open-source/base64-libraries
    implementation 'com.google.guava:guava:32.1.3-jre'
    implementation "commons-codec:commons-codec:1.16.0"
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    // libraries of json
    // https://mvnrepository.com/open-source/json-libraries
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.43'
    implementation 'com.cedarsoftware:json-io:4.19.1'
    implementation 'com.dslplatform:dsl-json:2.0.2'
    implementation "com.google.code.gson:gson:2.10.1"
    implementation 'jakarta.json:jakarta.json-api:2.1.3'
    implementation 'org.eclipse.parsson:parsson:1.1.5'
    implementation 'net.minidev:json-smart:2.5.0'
    implementation 'org.apache.groovy:groovy-json:4.0.16'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.6.2"
    implementation "org.json:json:20231013"
    runtimeOnly 'com.squareup.moshi:moshi:1.15.0'
    // libraries of jwt
    // https://mvnrepository.com/open-source/json-web-tokens-libraries
    implementation "com.auth0:java-jwt:4.4.0"
    implementation "org.bitbucket.b_c:jose4j:0.9.4"
    implementation "com.nimbusds:nimbus-jose-jwt:9.37.3"
    implementation 'io.fusionauth:fusionauth-jwt:5.3.1'
    implementation "io.jsonwebtoken:jjwt-api:0.12.3"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.12.3"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.12.3"
    implementation 'io.vertx:vertx-auth-jwt:4.5.1'
    implementation 'org.jboss.resteasy:jose-jwt:6.2.6.Final'
    // libraries of hashing password
    // https://mvnrepository.com/open-source/hashing-libraries
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'com.amdelamar:jhash:2.2.0'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.76'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    implementation 'de.mkammerer:argon2-jvm:2.11'
    implementation 'com.kosprov.jargon2:jargon2-api:1.1.1'
    implementation 'com.kosprov.jargon2:jargon2-native-ri-backend:1.1.1'
    implementation 'de.svenkubiak:jBCrypt:0.4.3'
    implementation 'com.password4j:password4j:1.7.3'
    implementation 'org.springframework.security:spring-security-crypto:6.2.0'
    implementation 'io.quarkus:quarkus-elytron-security-common:3.6.4'
    // HTTP Clients
    // https://mvnrepository.com/open-source/http-clients
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3'
    implementation 'org.eclipse.jetty:jetty-client:12.0.4'
    implementation 'org.jodd:jodd-http:6.3.0'
    // okhttp3
    implementation platform("com.squareup.okhttp3:okhttp-bom:5.0.0-alpha.12")
    implementation "com.squareup.okhttp3:okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor"
    // Log4j
    implementation platform("org.apache.logging.log4j:log4j-bom:2.22.0")
    implementation "org.apache.logging.log4j:log4j-api"
    runtimeOnly "org.apache.logging.log4j:log4j-core"
    implementation 'commons-logging:commons-logging:1.3.0'
    // testings
    testImplementation platform("org.junit:junit-bom:5.10.0")
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

jmh {
    warmupIterations = 2
    iterations = 5
    fork = 1
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
